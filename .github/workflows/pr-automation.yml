name: PR Automation

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'PR number (auto-detected if not provided)'
        type: string
        required: false
      repository:
        description: 'Repository name (auto-detected if not provided)'
        type: string
        required: false
      test_mode:
        description: 'Run in test mode (uses mock data)'
        type: boolean
        required: false
        default: false
    secrets:
      cursor_api_key:
        description: 'Cursor API key for AI analysis'
        required: true
      git_token:
        description: 'GitHub token for committing changes (defaults to GITHUB_TOKEN)'
        required: false

permissions:
  contents: write
  pull-requests: write

jobs:
  # Analyze when PR is opened/updated
  analyze:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Get PR info
        id: pr_info
        run: |
          echo "pr_number=${{ inputs.pr_number || github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "repository=${{ inputs.repository || github.repository }}" >> $GITHUB_OUTPUT
      
      - name: Checkout calling repository
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.pr_info.outputs.repository }}
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          fetch-depth: 0
      
      - name: Checkout workflow repository
        uses: actions/checkout@v4
        with:
          repository: efrat-rabin/ai-monitoring
          path: .ai-monitoring
          ref: main
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          cd .ai-monitoring
          pip install -r requirements.txt
      
      - name: Run analysis
        env:
          CURSOR_API_KEY: ${{ secrets.cursor_api_key }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEST_MODE: ${{ inputs.test_mode }}
        run: |
          export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}/.ai-monitoring/libs"
          cd ${GITHUB_WORKSPACE}
          python .ai-monitoring/actions/analyze-pr-code/code_analyzer.py \
            --pr-number ${{ steps.pr_info.outputs.pr_number }} \
            --repository ${{ steps.pr_info.outputs.repository }}
      
      - name: Post comment with results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}/.ai-monitoring/libs"
          python .ai-monitoring/actions/analyze-pr-code/post_comment.py \
            --pr-number ${{ steps.pr_info.outputs.pr_number }} \
            --repository ${{ steps.pr_info.outputs.repository }} \
            --commit-sha ${{ github.event.pull_request.head.sha }} \
            --results-file analysis-results.json

  # Apply fixes when developer comments /apply-logs
  apply-logs:
    if: |
      github.event_name == 'pull_request_review_comment' &&
      contains(github.event.comment.body, '/apply-logs')
    runs-on: ubuntu-latest
    steps:
      - name: Get PR info
        id: pr_info
        run: |
          echo "pr_number=${{ inputs.pr_number || github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "repository=${{ inputs.repository || github.repository }}" >> $GITHUB_OUTPUT
      
      - name: Checkout calling repository
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.pr_info.outputs.repository }}
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          token: ${{ secrets.git_token || secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Checkout workflow repository
        uses: actions/checkout@v4
        with:
          repository: efrat-rabin/ai-monitoring
          path: .ai-monitoring
          ref: main
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          cd .ai-monitoring
          pip install -r requirements.txt
      
      - name: Debug GitHub event context
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Comment ID: ${{ github.event.comment.id }}"
          echo "Comment in_reply_to_id: ${{ github.event.comment.in_reply_to_id }}"
          echo "Comment body: ${{ github.event.comment.body }}"
      
      - name: Check if apply should be triggered
        id: check_apply
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}/.ai-monitoring/libs"
          
          # Get comment IDs from event context
          COMMENT_ID="${{ github.event.comment.id }}"
          IN_REPLY_TO_ID="${{ github.event.comment.in_reply_to_id }}"
          
          # Debug output
          echo "Comment ID from event: '$COMMENT_ID'"
          echo "In-reply-to ID from event: '$IN_REPLY_TO_ID'"
          
          # Validate we have comment_id
          if [ -z "$COMMENT_ID" ]; then
            echo "ERROR: comment.id is not available in the event context"
            echo "This might happen if the workflow is not triggered by pull_request_review_comment event"
            echo "should_apply=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # If no in_reply_to_id, use comment_id itself
          if [ -z "$IN_REPLY_TO_ID" ]; then
            echo "No in_reply_to_id found, using comment_id as fallback"
            IN_REPLY_TO_ID="$COMMENT_ID"
          fi
          
          python .ai-monitoring/actions/apply-suggested-logs/check_apply_trigger.py \
            --pr-number ${{ steps.pr_info.outputs.pr_number }} \
            --repository ${{ steps.pr_info.outputs.repository }} \
            --comment-id "$COMMENT_ID" \
            --in-reply-to-id "$IN_REPLY_TO_ID"
      
      - name: Apply suggested changes
        if: steps.check_apply.outputs.should_apply == 'true'
        env:
          CURSOR_API_KEY: ${{ secrets.cursor_api_key }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}/.ai-monitoring/libs"
          cd ${GITHUB_WORKSPACE}
          python .ai-monitoring/actions/apply-suggested-logs/main.py \
            --pr-number ${{ steps.pr_info.outputs.pr_number }} \
            --repository ${{ steps.pr_info.outputs.repository }}
      
      - name: Commit and push changes
        if: steps.check_apply.outputs.should_apply == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Apply AI-suggested logging improvements"
            git push
          fi
      
      - name: Post success comment
        if: steps.check_apply.outputs.should_apply == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}/.ai-monitoring/libs"
          python .ai-monitoring/actions/apply-suggested-logs/post_apply_comment.py \
            --pr-number ${{ steps.pr_info.outputs.pr_number }} \
            --repository ${{ steps.pr_info.outputs.repository }} \
            --success true
