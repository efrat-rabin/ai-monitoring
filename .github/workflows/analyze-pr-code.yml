name: Analyze PR Code

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request Number'
        required: false
        type: string
      repository:
        description: 'Repository (owner/repo)'
        required: false
        type: string
      git_token:
        description: 'GitHub Token'
        required: true
        type: string
      cursor_api_key:
        description: 'Cursor API Key'
        required: true
        type: string
  workflow_call:
    inputs:
      pr_number:
        description: 'Pull Request Number'
        required: false
        type: string
      repository:
        description: 'Repository (owner/repo)'
        required: false
        type: string
    secrets:
      git_token:
        description: 'GitHub Token'
        required: true
      cursor_api_key:
        description: 'Cursor API Key'
        required: true

jobs:
  analyze:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run analyze PR code script
        run: python actions/analyze-pr-code/main.py
        env:
          GITHUB_TOKEN: ${{ inputs.git_token || secrets.git_token }}
          CURSOR_API_KEY: ${{ inputs.cursor_api_key || secrets.cursor_api_key }}
          PR_NUMBER: ${{ inputs.pr_number }}
          REPOSITORY: ${{ inputs.repository }}
      
      - name: Upload analysis results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: analysis-results
          path: analysis-results.json
          retention-days: 30
      
      - name: Comment analysis results on PR
        if: inputs.pr_number
        uses: actions/github-script@v7
        with:
          github-token: ${{ inputs.git_token || secrets.git_token }}
          script: |
            const fs = require('fs');
            
            // Read analysis results
            let results;
            try {
              results = JSON.parse(fs.readFileSync('analysis-results.json', 'utf8'));
            } catch (error) {
              console.log('No analysis results found');
              return;
            }
            
            // Format results as markdown comment
            let comment = '## 🤖 AI Code Analysis Results\n\n';
            
            if (results.length === 0) {
              comment += 'No files were analyzed in this PR.\n';
            } else {
              for (const result of results) {
                comment += `### 📄 File: \`${result.file}\`\n\n`;
                
                if (result.analysis.error) {
                  comment += `❌ **Error:** ${result.analysis.error}\n\n`;
                } else if (result.analysis.issues && result.analysis.issues.length > 0) {
                  comment += `**Found ${result.analysis.issues.length} issue(s):**\n\n`;
                  
                  for (const issue of result.analysis.issues) {
                    comment += '<details>\n';
                    comment += `<summary><strong>${issue.severity || 'MEDIUM'}</strong> - ${issue.category || 'general'}: ${issue.method || 'N/A'}</summary>\n\n`;
                    comment += `**File:** \`${result.file}\`\n\n`;
                    
                    if (issue.line) {
                      comment += `**Line:** ${issue.line}\n\n`;
                      comment += `**Location:** [\`${result.file}:${issue.line}\`](../blob/${context.sha}/${result.file}#L${issue.line})\n\n`;
                    }
                    
                    if (issue.description) {
                      comment += `**Description:** ${issue.description}\n\n`;
                    }
                    
                    if (issue.recommendation) {
                      comment += `**Recommendation:**\n\`\`\`typescript\n${issue.recommendation}\n\`\`\`\n\n`;
                    }
                    
                    if (issue.impact) {
                      comment += `**Impact:** ${issue.impact}\n\n`;
                    }
                    
                    comment += '</details>\n\n';
                  }
                }
                
                if (result.analysis.summary) {
                  comment += `**Summary:** ${result.analysis.summary}\n\n`;
                }
                
                comment += '---\n\n';
              }
            }
            
            comment += '*Analysis powered by Cursor AI*\n';
            
            // Post comment on PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.pr_number }},
              body: comment
            });

