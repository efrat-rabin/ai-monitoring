{
  "triggered": true,
  "comment_id": 2475458305,
  "comment_author": "efrat-rabin",
  "parent_comment_id": 2474883813,
  "parent_comment_body": "**\ud83e\udd16 CRITICAL** - missing-logs in `send_message`\n\nThe core method that performs external API calls to cursor-agent lacks any logging. No entry logs with request details, no success logs, no timing metrics, and errors are raised without being logged first. This makes it impossible to troubleshoot API call failures, track request volume, or monitor performance.\n\n**Recommendation:**\n```python\nAdd structured logging: log entry with prompt length/truncated prompt, log success with response metadata, log duration/timing, and log errors before raising. Example: logger.info('sending_cursor_message', extra={'prompt_length': len(prompt), 'has_context': bool(context), 'correlation_id': correlation_id}); start_time = time.time(); ...; logger.info('cursor_message_success', extra={'duration_ms': (time.time() - start_time) * 1000, 'response_size': len(str(result))}); logger.error('cursor_message_failed', extra={'error': str(e), 'stderr': result.stderr}, exc_info=True)\n```\n\n**Impact:** Without logs in send_message, production issues with Cursor API calls cannot be diagnosed. Cannot determine request rates, latency patterns, failure modes, or correlate errors with specific requests. Violates observability best practices for external API integrations.\n\n---\nReply with `/apply-logs` to apply this change automatically.\n\n<!-- ISSUE_DATA: {\"file\": \"test-examples/user-service.ts\", \"severity\": \"CRITICAL\", \"category\": \"missing-logs\", \"method\": \"send_message\", \"line\": 95, \"description\": \"The core method that performs external API calls to cursor-agent lacks any logging. No entry logs with request details, no success logs, no timing metrics, and errors are raised without being logged first. This makes it impossible to troubleshoot API call failures, track request volume, or monitor performance.\", \"recommendation\": \"Add structured logging: log entry with prompt length/truncated prompt, log success with response metadata, log duration/timing, and log errors before raising. Example: logger.info('sending_cursor_message', extra={'prompt_length': len(prompt), 'has_context': bool(context), 'correlation_id': correlation_id}); start_time = time.time(); ...; logger.info('cursor_message_success', extra={'duration_ms': (time.time() - start_time) * 1000, 'response_size': len(str(result))}); logger.error('cursor_message_failed', extra={'error': str(e), 'stderr': result.stderr}, exc_info=True)\", \"impact\": \"Without logs in send_message, production issues with Cursor API calls cannot be diagnosed. Cannot determine request rates, latency patterns, failure modes, or correlate errors with specific requests. Violates observability best practices for external API integrations.\"} -->"
}